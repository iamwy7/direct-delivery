apiVersion: v1
kind: ConfigMap
metadata:
  name: order-mysql-initdb-config
data:
  initdb.sql: |
    CREATE DATABASE IF NOT EXISTS micro_orders;
    CREATE TABLE IF NOT EXISTS `micro_orders`.`orders` (
      `id` VARCHAR(255) NOT NULL,
      `drone_id` VARCHAR(255) NOT NULL,
      `drone_name` VARCHAR(255) NOT NULL,
      `location_id` SMALLINT NOT NULL,
      `location_geo` VARCHAR(255) NOT NULL,
      `status` SMALLINT NOT NULL,
      `created_at` TIMESTAMP NOT NULL,
      PRIMARY KEY (`id`)
    )

---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: order-mysql
  labels:
    app: order-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: order-mysql
    spec:
      containers:
      - image: mysql:5.7
        args:
          - "--ignore-db-dir=lost+found"
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: order-mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: order-mysql-pv-claim
      - name: order-mysql-initdb
        configMap:
          name: order-mysql-initdb-config

---
    
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: order-mysql-pv-claim
  labels:
    app: order-mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi    

---
    
apiVersion: v1
kind: Service
metadata:
  name: order-mysql-service
  labels:
    app: order-mysql-service
spec:
  ports:
    - port: 3306
  selector:
    app: order-mysql
  clusterIP: None    